package merged.pagopa.pagopa_api.pa.pafornode;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.6
 * 2022-12-01T11:03:15.836+01:00
 * Generated source version: 3.2.6
 *
 */
@WebServiceClient(name = "PaForNodeNMUpT",
                  wsdlLocation = "file:/C:/D/Works/GIT/OpeIadSccDcc/PagoPa/PA_Mock/src/main/resources/WSDL_XSD.20221128/2.0/wsdl/paForNode_merged.wsdl",
                  targetNamespace = "http://pagopa-api.pagopa.gov.it/paForNode")
public class PaForNodeNMUpT extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://pagopa-api.pagopa.gov.it/paForNode", "PaForNodeNMUpT");
    public final static QName PaForNodePort = new QName("http://pagopa-api.pagopa.gov.it/paForNode", "paForNodePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/D/Works/GIT/OpeIadSccDcc/PagoPa/PA_Mock/src/main/resources/WSDL_XSD.20221128/2.0/wsdl/paForNode_merged.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(PaForNodeNMUpT.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/D/Works/GIT/OpeIadSccDcc/PagoPa/PA_Mock/src/main/resources/WSDL_XSD.20221128/2.0/wsdl/paForNode_merged.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public PaForNodeNMUpT(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public PaForNodeNMUpT(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PaForNodeNMUpT() {
        super(WSDL_LOCATION, SERVICE);
    }

    public PaForNodeNMUpT(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public PaForNodeNMUpT(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public PaForNodeNMUpT(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns PaForNode
     */
    @WebEndpoint(name = "paForNodePort")
    public PaForNode getPaForNodePort() {
        return super.getPort(PaForNodePort, PaForNode.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PaForNode
     */
    @WebEndpoint(name = "paForNodePort")
    public PaForNode getPaForNodePort(WebServiceFeature... features) {
        return super.getPort(PaForNodePort, PaForNode.class, features);
    }

}
